#!/bin/sh

while [ -n "$1" ]; do
  case "$1" in
    -u|--untraceable)       CXXFLAGS="$CXXFLAGS -DUNTRACEABLE";;
    -s|--static)            CXXFLAGS="$CXXFLAGS -static -static-libgcc -static-libstdc++";;
    -r|--random-key)        CXXFLAGS="$CXXFLAGS -DOBFUSCATE_KEY=$(perl -e 'print int(rand(127))+1')";;
    -e|--embed-interpreter) INTERPRETER_NAME="$2"; CXXFLAGS="$CXXFLAGS -DEMBED_INTERPRETER_NAME=$2"; shift;;
    -0|--fix-argv0)         CXXFLAGS="$CXXFLAGS -DFIX_ARGV0";;
    -v|--verbose)           set -x; CXXFLAGS="$CXXFLAGS -v";;
    -h|--help)              SHOW_USAGE=1;;
    -*|--*)                 echo "Unknown option $1"; exit 1;;
    *)                      POSITIONAL_ARGS="$POSITIONAL_ARGS \"$1\"";;
  esac
  shift
done
eval set -- $POSITIONAL_ARGS
if [ -n "$SHOW_USAGE" -o  $# != 2 ]; then
    echo "Usage: $0 [-u] [-s] [-r] [-e interpreter] <script> <binary>"
    echo "  -u, --untraceable        make untraceable binary"
    echo "  -s, --static             make static binary, more portable but bigger"
    echo "  -r, --random-key         use random key for obfuscation"
    echo "  -e, --embed-interpreter  embed specified interpreter into binary"
    echo "  -0, --fix-argv0          try to fix \$0, may not work"
    echo "  -v, --verbose            show debug messages"
    echo "  -h, --help               display this help and exit"
    exit 0
fi

DIR="$(dirname "$0")/src"
[ -z "$CXX" ] && CXX=${CROSS_COMPILE}g++
[ -z "$LD" ] && LD=${CROSS_COMPILE}ld
[ -z "$STRIP" ] && STRIP=${CROSS_COMPILE}strip

CXX_STANDARD=c++14
case "$(uname -s)" in
    Linux*)       MACHINE=Linux;;
    Darwin*)      MACHINE=Mac;;
    CYGWIN*)      MACHINE=Cygwin; CXX_STANDARD=gnu++14;;
    MINGW*|MSYS*) echo "please use cygwin"; exit 1;;
    *)            echo "unsupported system"; exit 1;;
esac

# convert interpreter to object file
if [ -n "$INTERPRETER_NAME" ]; then
  cp "$INTERPRETER_NAME" _ || exit 1
  if [ "$MACHINE" = Mac ]; then
    touch stub.cpp
    $CXX -o stub.o -c stub.cpp
    $LD -r -o _.o -sectcreate binary _ _ stub.o || exit 1
    rm -f stub.cpp stub.o
  else
    $LD -r -b binary -o _.o _ || exit 1
  fi
  LDFLAGS="$LDFLAGS _.o"
fi

# generate c++ source code with script code
perl -pe "s|SCRIPT_FILE_NAME|$1|g; s|SCRIPT_CONTENT|\`cat '$1'\`|ge" "$DIR/main.cpp" >"$1.cpp" || exit 1

# compile c++ source code to binary
if $CXX -v 2>&1 | grep clang >/dev/null 2>&1; then
  CXXFLAGS="$CXXFLAGS -fconstexpr-depth=1073741824 -fconstexpr-steps=1073741824"
else
  CXXFLAGS="$CXXFLAGS -fconstexpr-loop-limit=1073741824 -fconstexpr-ops-limit=1073741824"
fi
$CXX -I"$DIR" -std=$CXX_STANDARD $CXXFLAGS "$1.cpp" $LDFLAGS -o "$2" || exit 1
$STRIP "$2"

# cleanup
rm -f "$1.cpp" _.o _
